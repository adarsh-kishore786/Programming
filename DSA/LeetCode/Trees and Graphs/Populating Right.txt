/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* returnTrace(Node* root, const vector<int>& moves) {
        for (int m : moves) {
            if (m == 0)
                root = root->left;
            else
                root = root->right;
        }
        return root;
    }
    
    bool canIncrement(vector<int>& moves) {
        for (int m : moves) {
            if (m == 0)
                return true;
        }
        return false;
    }
    
    vector<int> incrementVector(vector<int>& moves) {
        for (int i = moves.size() - 1; i >= 0; i--) {
            if (moves[i] == 0) {
                moves[i] = 1;
                return moves;
            }
            if (moves[i] == 1) 
                moves[i] = 0;
        }
        return moves;
    }
    
    Node* connect(Node* root) {
        if (!root) return nullptr;
        
        vector<int> moves {};
        Node* temp = root;
        int level = 0;
        while (temp) {
            moves.clear();
            for (int i = 0; i < level; i++)
                moves.push_back(0);
            while (canIncrement(moves)) {
                Node* n1 = returnTrace(root, moves);
                moves = incrementVector(moves);
                Node* n2 = returnTrace(root, moves);
                
                if (n1)
                    n1->next = n2;
            }
            temp = temp->left;
            level++;
        }
        return root;
    }
};